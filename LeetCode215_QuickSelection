public int findKthLargest(int[] nums, int k){
  quickSelection(nums, 0, nums.length - 1, k);
  return nums[nums.length - k];
}

private void quickSelection(int[] nums, int l, int r, int k){
  if(l >= r) return;
  int p = partition(nums, l, r);
  if(p == nums.length - k){ 
    return;
   }else if( p < nums.length - k){
    quickSelection(nums, p + 1, r, k);
   }else{
    quickSelection(nums, l, p - 1, k);
   }
}

private int partition(int[] nums, int l, int r){
  int p = nums[r];
  for(int i = l; i < r; ++i){
    if(nums[i] < p){
      swap(nums, i, l);
      ++l;
     }
  }
  swap(nums, l, r);
  return l;
}

private void swap(int[] nums, int i, int j){
  int tmp = nums[i];
  nums[i] = nums[j];
  nums[j] = tmp;
}
