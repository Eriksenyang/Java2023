https://www.youtube.com/watch?v=LynFxUh2wbo&t=195s
k : 2k+1/ 2k+2
k-1/2

private void buildHeap(int[] nums){
  for(int i = nums.length / 2; i > 0; i--){ //因为是tree 所以长度 /2
    heapify(nums, nums.length, i); //max-heap
  }
}

private static heapify(int[] nums, int n, int i){
  int largest = i;
  int l = 2 * i + 1;
  int r = 2 * i + 2;

  if(l < n && nums[l] > nums[largest]) largest = l;
  if(r < n && nums[r] > nums[largest]) largest = r;
  if(largest != i){ //要max在 父节点
     int tmp = nums[i];
     nums[i] = nums[largest];
     nums[largest] = tmp;
     heapify(nums, n, largest);// recursively heapify affected sub-tree
  }
}

public void heapSort(int[] nums){
  int len = nums.length;
  for(int i = n / 2 -1; i >= 0; i--){ //build heap
    heapify(nums, n, i);
  }
  for(int i = n - 1; i > 0; i--){ //一个一个max 出heap 
    int tmp = nums[0];
    nums[0] = nums[i];
    nums[i] = tmp;// 把 root 移到 i, 
    
    heapify(nums, i, 0);//recursively call heapify affected sub-tree
  }
} 
