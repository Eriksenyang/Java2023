//此外我们要判断的是当前节点在之前层有没有出现过，当前层正在遍历的节点先加到 subVisited 中。

public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
  List<List<String>> ans = new ArrayList<>();
  if(!WordList.contains(endWord)){
    return ans;
  }
  //HashMap<String, Integer> distance = new HashMap<>();
  HashMap<String, ArrayList<String>> map = new HashMap<>();
  bfs(beginWord, endWord, wordList, map);
  ArrayList<String> temp = new ArrayList<String>();
  temp.add(beginWord);
  findLadderHelper(beginWord, endWord, map, tmp, ans);
  return ans;
}

private void findLaddersHelper(String beginWord, String endWord, HashMap<String, ArrayList<String>> map,
                               ArrayList<String> temp, List<List<String>> ans) {
  if(beginWord.equals(endWord)){
    ans.add(new ArrayList<String>(temp));
    return;
  }                             
  ArrayList<String> neighbors = map.getOrDefault(beginWord, new ArrayList<String>());
  for(String beighbor : neighbors){
      tmp.add(neighbor);
      findLaddersHelper(neighbor, endWord, map,temp, ans);
      temp.remove(temp.size() - 1);
  }

public void bfs(String beginWord, String endWord, List<String> wordList, HashMap<String, ArrayList<String>> map) {

 Queue<String> queue = new LinkedList<>();
 queue.offer(beginWord);
 //distance.put(beginWord, 0);
 boolean isFound = false;
 int depth = 0;
 
 Set<String> dict = new  HashSet<>(wordList);
 Set<String> visited = new HashSet<>();
 visited.add(beginWord);
 while(!queue.isEmpty()){
  int size = queue.size();
  depth++;
  for(int j = 0; j < size; ++j){
    String tmp = queue.poll();
    ArrayList<String> neighbors = getNeighbors(tmp, dict);
    Iterator<String> it = neighbors.iterator();
    while(it.hasNext()){
      String neighbor = it.next();
      if(!visited.contains(neighbor)){
        if(!distance.containsKey(neighbor)){
          distance.put(neighbor, depth);
          if(neighbor.equals(endWord)){
            isFound = true;
          }
           queue.offer(neighbor);
           subVisited.add(neighbor);
        }else{
          it.remove();
        }     
    }
    map.put(tmp, neighbors);
  }
  visited.addAll(subVisited);
  if(isFound){
    break;
  }
 }

 private ArrayList<String> getNeighbors(String node, Set<String> dict) {
  ArrayList<String> res = new ArrayList<String>();
  char[] chs = node.toCharArray();
  
  for(char ch = 'a'; ch <= 'z'; ++ch){
    for(int i = 0; i < chs.length; ++i){
      if(chs[i] == ch)continue;
      char old = chs[i];
      chs[i] = ch;
      if(dict.contains(String.valueOf(chs))){
        res.add(String.valueOf(chs));
      }
      chs[i] = old;
    }
  }
  return res;
  }
 
 
 
 
 
 
 
 

