int min = 0;
public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
  List<List<String>> ans = new ArrayList<>();
  if(!WordList.contains(endWord)){
    return ans;
  }
  HashMap<String, ArrayList<String>> map = bfs(beginWord, endWord, wordList);
  ArrayList<String> temp = new ArrayList<String>();
  temp.add(beginWord);
  findLadderHelper(beginWord, endWord, map, tmp, ans);
  return ans;
}
private void findLaddersHelper(String beginWord, String endWord, HashMap<String, ArrayList<String>> map,
                               ArrayList<String> temp, List<List<String>> ans) {
  if(beginWord.equals(endWord)){
    ans.add(new ArrayList<String>(temp));
    return;
  }                             
  if(temp.size() -1 == min){
    return;
  }
  ArrayList<String> neighbors = map.getOrDefault(beginWord, new ArrayList<String>());
  for(String beighbor : neighbors){
    if(tmp.contains(beighbor)){
      continue;
    }
    tmp.add(neighbor);
    findLaddersHelper(neighbor, endWord, map, temp, ans);
    temp.remove(temp.size() - 1);
  }

public HashMap<String, ArrayList<String>> bfs(String beginWord, String endWord, List<String> wordList) {  
 Queue<String> queue = new LinkedList<>();
 queue.offer(beginWord);
 HashMap<String, ArrayList<String>> map = new HashMap<>();
 boolean isFound = false;
 
 Set<String> dict = new  HashSet<>();
 while(!queue.isEmpty()){
  int size = queue.size();
  min++;
  for(int j = 0; j < size; ++j){
    String tmp = queue.poll();
    ArrayList<String> neighbors = getNeighbors(tmp, dict);
    map.put(tmp, neighbors);
    for(String neighbor : neighbors){
      if(neighbor.equls(endWord)){
        isFound = true;
      }
      queue.offer(neighbor);
    }
  }
  if(isFound){
    break;
  }
 }
 return map;
 }
 private ArrayList<String> getNeighbors(String node, Set<String> dict) {
  ArrayList<String> res = new ArrayList<String>();
  char[] chs = node.toCharArray();
  
  for(char ch = 'a'; ch <= 'z'; ++ch){
    for(int i = 0; i < chs.length; ++i){
      if(chs[i] == ch)continue;
      char old = chs[i];
      chs[i] = ch;
      if(dict.contains(String.valueOf(chs))){
        res.add(String.valueOf(chs));
      }
      chs[i] = old;
    }
  }
  return res;
  }
 
 
 
 
 
 
 
 

