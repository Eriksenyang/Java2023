p134 spring
    Application context refresh
    1.  prepareRefresh : environment 
        @Value("${aaa}") 从properties中读值
        //bean factory
    2. obtainFreshBeanFactory: beanFactory : bean definition(xml, @Bean ,scan)

    3. prepareBeanFactory : 准备beanFactory

    4. postProcessBeanFactory : 子类扩展beanFactory

    5. invokeBeanFactoryPostProcessores : 触发生成beanFactory之后扩展

    6.  registerBeanPostProcessors : 注册bean
        
    7.  initMessageSource : applicationContext
    8.  initApplicationEventMulticaster : 发布事件
    9.  onRefresh
    10. registerLiseners : 监听器
    11. finishBeanFactoryInialization： init singlton Bean 
    12. finishRefresh : 生命周期管理器

p143 bean lifeCycle : doGetBean
    1.处理别名, 检查缓存：三级缓存 1.singletonObject  2.earlySingletonObject(处理代理循环依赖) 3. singletonFactories 
    2.处理父子容器 :
    3.deponsOn ： 可以控制先后
    4.scope : singleton : 创建:.getBean(),  销毁:.close(). check singleton pool, 没有就创建然后放入单例池. 创建: 
              prototype : 创建:.getBean(), 销毁:.destoyBean(). 每次都 建新的
              request : 创建:.getBean(),销毁:.requestCompleted().  从request范围内找, 没有就新建放入request
    5.create 1.创建 autowiredAnnotationBeanPostProcessor / defaut 无参构造
                                                    @Resource InjectionMetadata进行注入    
             2. DI ：bean与其他bean的 1.Autowired/Common AnnotationBeanPostProcess 2.AUTOWIRED_By_NAME/TYPE 3.applyPropertyValues   
             3. init: @PostConstruct/ initializaingBean / initMethod
             4.注册可销毁bean: DisposableBean / Autocloseable, destroyMethod, close/shutdown, @PreDestroy 
    6.类型转换
    7.销毁 ： singleton : ApplicationContext.close 
              prototype : 可手动销毁 AutowireCapableBeanFactory.destroyBean()
              request : 生命周期结束时

p144
          
          
P152 spring-transaction事物失效 异常处理: 
    默认 error & runtimeException才rollback.  rollBackFor = exception.class  保证checkedException rollback
  
  @Configuration
  @PropertySource("classpath:jdbc.properties")
  @EnableTransactionManagerment
  @ComponentScan("xxx.service") //scan 包
  @MapperScan()//mybatis scan map
  public class AppConfig{
    @ConfigurationProperties("jdbc")
    @Bean
    public DataSource dataSource(){ return new HikariDataSource(); }
  }

  @Service  
  public class Services1{
    @Autowird
    private AccountMapper accountMapper;
    
    @Transactional(rollBackFor = exception.class) // 用 rollBackFor 保证checkedException rollback 回滚
    public void transfer(){
      
    }
  }

p153. try-catch 错误 : throw | setRollbackOnly()
    try{
       }catch(FileNotFoundException e){
        e.printStackTrace();
        throw new RuntimeException(e); //1. 需要throw exception
                                       //2.或者调用 TransactionInterceptor.currentTransactionStatus().setRollbackOnly();
    }
    
 p154. @Aspect 异常 ： 1. throw | 2. setRollbackOnly()　｜
       public class MyAspect{
        @Around("execution()")
        public Object around(ProceedingJoinPoint pjp) throws Throwable{
            try{
            }catch{
                throw / setRollbackOnly
            }
        }
       } 
 
p155  @Transaction 要放在 public method 
            @Transaction
            public XXX
    
p156. 父子容器 : 父只scan父的
  
p157. 本类方法调用 :                                   @
    @Autowired                                     ((Services)AopContext.currentProxy()).bar()
    private Service poxy;
    
    poxy.bar();

p158. Thread 原子性 :
    @Transactional(rollBackFor = exception.class) // 用 rollBackFor 保证回滚
    public void transfer(int from, int to, int amount){
         int fromeBalance = accountMapper.findBalanceBy(from);
         if(fromeBalance - amount >= 0){
            accountMapper.update(from, -1 * amount);
            accountMapper.update(to, amount);
         }
    }
    
    7.1 扩大sync的范围,  在调用方法上加sync, 而不是目标方法上. 
    Object lock = new Object
    new myThread(()->{
            synchronized(obj){
            bean.transfer(1, 2, 100);
        }
        latch.countDown();
    }, t1).start();
    
    7.2 在DB用from update 保证原子性.   select... from update 
    public interface AccountMapper{
        @Select("select balance from account where accountNo=#{accountNo} from update")
        int findBalanceBy(int accountNo);
    }
    












          
          
