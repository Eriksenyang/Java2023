1.sort
2.二分

public static int binarySearch(int[] nums, int t){
  int l = 0;
  int r = nums.length - 1;
  while(l <= r){
    int mid = l + (r - l)/2;
    if(mid == t){ 
      return mid;
    }else if(mid < t){
      l = mid + 1;
    }else{
      r = mid - 1;
    }
  }
  return -1;
}

2. BubbleSort
public static void bubbleSort(int[] nums){

for(int j = nums.length - 1; j > 0; j--){//数组一直减小
  for(int i = 0; i < nums.length; i++){ //从头到尾, 两两比较
    if(nums[i] > nums[i + 1]){
      swap(nums, i, i + 1);
    }
  }
  
  }
}
3. SelectSort: Select sort  O(N2) 6:00 : 从0 到 n-1, 找min, 放到0. (1~n-1, min, 放到1)
  public static void selectSort(int[] nums){
    for(int i = 0; i < nums.length - 1; i++){ //有多少个位置需要sort
      int min = i;
      for(int j = i + 1; j < nums.length; j++){//找min
        if(nums[j] < num[min]){
          min = j;
        }       
      }
      swap(nums, i, min);
    }
  }
4. InsertSort :  0~0有序, 0~1有序,
  public static void InsertionSort(int[] nums){
    for(int i = 1; i < nums.length; i++ ){ //无序的
      for(int j = i - 1; j >= 0; j--){ //有序的
        if(nums[i] < nums[j]){
          swap(nums, i, j);
        }
      }
    }
  }




















