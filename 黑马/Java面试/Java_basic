1.OOP https://www.jianshu.com/p/d05da985ead8   https://www.cnblogs.com/taylorshi/p/16640751.html
  Encapsulation : purposefully hiding information(intrnal characteristics & behavior) : public/prtected/default/private
    封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部访问
  inheritence : acquire the fields and methods from another class (reusability code) : 子用到父方法 super(), 重写父@Override
    继承是用来表示类之间的is-a关系
  Plymorphism :same interface for differing underlying data types  子类 override 父类方法, 父类引用指向子类实例
        父类类型  变量名 = new 子类类型() Pet pet = new Cat();    Pet pet = new Bird();
        变量名.方法名()                  pet.toString();         pet.toString(); //子类 override 父类方法, 同方法call 不同子类返回不同结果
        
        向上转型 : (子类对象赋值给一个父类引用) 父类类型  变量名 = new 子类类型();
        向下转型：(一个已经向上转型的子类对象,可以使用强制类型转换，将父类引用转为子类引用)  子类类型 变量名 = (子类类型) 父类类型的变量;
        向上转型后，只能使用父类共性的内容，而无法使用子类特有的功能。若要使用子类特有的功能, 要用instanceof先判断: if (变量名 instanceof 子类类型)才能用
  Abstraction ：is the process of separating ideas from specific instances.  “hides” unnecessary information. T
    抽象是如何隐藏方法的具体实现，让调用者只需要关心方法提供了哪些功能，并不需要知道这些功能是如何实现的。
    
2. interface vs abstract class  ： https://blog.csdn.net/chenssy/article/details/12858267
      abstract : 抽象类是对类抽象    1.抽象类主要用来抽取子类的通用特性，作为子类的模板
      interface： 接口是对行为的抽象 1.接口是抽象方法的集合，声明了一系列的方法操作
      
3. JVM-JRE-JDK 
  JVM) is a process virtual machine that can execute Java bytecode(“Platform Independent Programming Language)
  https://github.com/Eriksenyang/2020Self/blob/master/%E9%BB%91%E9%A9%AC/Java%E9%9D%A2%E8%AF%95/JVM

4.byte(8) short(16) int(32) long(64) float(32) double(64) char(16) boolean 

5.String:  string 被建后不可修改. 修改是String pool 新建的
 StringBuffer :   慢. thread safe
 StirngBuilder :  快, thread unsafe
 
6. == vs equals ：
    ==     : 基本类型:value,  引用类型 @
    equals : 

7.Enums
  
8 clone: implement Cloneable interface
  deep copy : copy original object into new objects
  shallowCopy: which shares the same references as the original object

9. Equals : override equals() with hashCode()
    equals : compares two objects for equality
    ==     : two objects point to the same address in memory
    
10. HashCode : primarily useful for hash table
      object into an integer

11. toString : textual representation of an object,

12. pass by ref vs pass by value

13. Overrideing vs Overloading










