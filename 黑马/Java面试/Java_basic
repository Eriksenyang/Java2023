0.1 Variables : https://m.runoob.com/java/java-variable-types.html
  Static/class variable(private static int staticVar) :  class内, method外, static修饰
  Instance variable(成员) : class内, method外, 被整个class用. ***不用初始化(有默认值)
  local variable(局部) : class内, emthod内, 被method用.       ***要初始化

0.2 jvm + lib = jre + dev tools = jdk


1.OOP 
  https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/
  https://www.jianshu.com/p/d05da985ead8   
  https://www.cnblogs.com/taylorshi/p/16640751.html
  
  1.1 Encapsulation(data hiding) : purposefully hiding information(intrnal characteristics & behavior) : public/prtected/default/private
         封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部访问
         
  1.2 inheritence : acquire the fields and methods from another class (reusability code) : 子用到父方法 super(), 重写父@Override
                     继承是用来表示类之间的is-a关系
                     
  1.3 Plymorphism(having many forms) :same interface have multiple implementations.  子类 override 父类方法, 父类引用指向子类实例
        父类类型  变量名 = new 子类类型() Pet pet = new Cat();    Pet pet = new Bird();
        变量名.方法名()                  pet.toString();         pet.toString(); //子类 override 父类方法, 同方法call 不同子类返回不同结果
        
        向上转型 : (子类对象赋值给一个父类引用) 父类类型  变量名 = new 子类类型();
        向下转型：(一个已经向上转型的子类对象,可以使用强制类型转换，将父类引用转为子类引用)  子类类型 变量名 = (子类类型) 父类类型的变量;
        向上转型后，只能使用父类共性的内容，而无法使用子类特有的功能。若要使用子类特有的功能, 要用instanceof先判断: if (变量名 instanceof 子类类型)才能用
        1.3.1 Method Overloading: When there are multiple functions with the same name but different parameters 
                                  Compile-time Polymorphism
        1.3.2 Method overriding: subclassto provide a specific implementation of a method that is already provided by parent classes
                                  Run Time Polymorphism
 
 1.4 Abstraction(detail hiding) ：is the process of separating ideas from specific instances.  “hides” unnecessary information. 
      抽象是如何隐藏方法的具体实现，让调用者只需要关心方法提供了哪些功能，并不需要知道这些功能是如何实现的。
    
    
2. interface vs abstract class  ： https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-java/
                                   https://blog.csdn.net/chenssy/article/details/12858267
      abstract : 抽象类是对类抽象    1.抽象类主要用来抽取子类的通用特性，作为子类的模板
                  abstract classes are used to provide a base class for concrete subclasses to inherit from,
                  abstract classes are used to plan an inheritance hierarchy and simplify the work of subclasses
      interface： 接口是对行为的抽象 1.接口是抽象方法的集合，声明了一系列的方法操作
                  interfaces are used to define a set of methods that a class must implement
                  Interfaces are used to introduce a layer of abstraction and decouple modules of code
                  
3. JVM-JRE-JDK 
  JVM is a process virtual machine that can execute Java bytecode(“Platform Independent Programming Language)
  https://github.com/Eriksenyang/2020Self/blob/master/%E9%BB%91%E9%A9%AC/Java%E9%9D%A2%E8%AF%95/JVM

4.byte(8) short(16) int(32) long(64) float(32) double(64) char(16) boolean 

5.String:  string 被建后不可修改. 修改是String pool 新建的
    String s1 = "R"; String s2 = "R";(string pool中 同一个), String s4 = new String("R");(heap中 新的)      
   StringBuffer :   慢. thread safe
   StirngBuilder :  快, thread unsafe
 
6. == vs equals ：
    ==     : 基本类型:value,  引用类型 @
    equals : 

7.Enums : enum type stay fixed for all time.

8. final 
    Final variables : declaring constants
    Final methods : it cannot be overridden by a subclass
    Final classes :  it cannot be extended by a subclass

9. static
    Shared memory allocation
    Accessible without object instantiation
    Associated with class, not objects
    Cannot access non-static members
    Can be overloaded, but not overridden
    
8 clone: implement Cloneable interface
  deep copy : copy original object into new objects
  shallowCopy: which shares the same references as the original object

9. Equals : override equals() with hashCode()
    equals : compares two objects for equality
    ==     : two objects point to the same address in memory
    
10. HashCode : primarily useful for hash table
      object into an integer

11. toString : textual representation of an object,

12. pass by ref vs pass by value

13. Overrideing vs Overloading

14. Exception : classLevel https://github.com/Eriksenyang/2020Self/blob/master/%E9%BB%91%E9%A9%AC/Java%E9%9D%A2%E8%AF%95/%E9%A9%AC%E5%A3%AB%E5%85%B5Java
    Throwable : 
      unchecked exception(RuntimeEx) :                                              NullPointerExceptions
      checked exception(compile-timeEx)   :   try{}catch{}finally or throwsIOExceptions  IOExceptions
    
15 Thread
    https://github.com/Eriksenyang/2020Self/blob/master/%E9%BB%91%E9%A9%AC/Java%E9%9D%A2%E8%AF%95/Thread
    
15.1 HashTable vs ConcurrentHashMap
      https://github.com/Eriksenyang/2020Self/blob/master/%E9%BB%91%E9%A9%AC/Java%E9%9D%A2%E8%AF%95/HashTable%20vs%20ConcurrentHashMap

16. Collection : group of objs
      List : ordered & can dup 
      set  : no ordered & no duplicate 
      map  : key & value, no dup
      iterator
      
      Array: int[] a = new int[size];  Arrays.sort() Arrays.binarySreach(Object[] a, Object key)
      ArrayList(dynamic arrays) : size(), get(), set(), add(), remove(), Collections.sort()
      LinkedList: size(), get(), add(), remove(),
      Stack: FILO push/pop
      Queue: FIFO add/poll
      HashSet: 不重复, 有null, 无序, 线程不安全, contains(),  size(), add(), remove(),
      HashMap: 1个null key. size(), keySet(), entrySet(), values(),  put(), get(key), remove(key), clean() 
      
      
    
17. fail-fast(java.util) : only iterator.remove(), 其他情况 对集合的个数做出修改（添加、删除） ConcurrentModificationException. 预防 synchronized
    fail-safe(java.util.concurrent) : 对集合结构的修改都会在一个复制的集合上进行(开销大 | 无法保证读取的数据是目前原始数据)




99.concurrentHashMap thread-safe







