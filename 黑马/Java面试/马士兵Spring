https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans

https://www.bilibili.com/video/BV1yA411c7Ae/?spm_id_from=333.337.search-card.all.click
总 : 关键点
分 : 以1,2,3...细分关键点(技术名词:概念,接口,关键方法). 不会的直接忽略
遇到熟悉问题一直说,拖时间.(面试官多题,自己多漏洞,尽量少题)


1.SPring IOC : all obj let spring to handle 
    总
    DI:  dependcy Injection to obj @Autowired
    ApplicationContext(管理bean生命周期) : use map,  L3 memery: singletonObject, earlySingletonObject, singletonFactories. 
    分    
    创建过程： ApplicationContext.refresh()
    --beanFactory
    1. prepareRefreshz准备: environment(obj):properties (QualifierAnnotationAutowireCandidateResolver.getSuggestedValue) 取@Value("hi")
    2  obtainFreshBeanFactory获取|创建: beanDefinitionMap(蓝图), DefaultListableBeanFactory(), bean definition来源(xml, @Bean ,scan)
    3. prepareBeanFactory准备 : ResouceEditorRegistrar (用1的environment 解析 ${})
    4. PostProcessBeanFactory扩展 : 
    5. invokeBeanFactoryPostProcessors :扩展 configurationClassPostProcessor解析 @Configuration @Bean, PlaceHolderConfigurSupport
    6. registerBeanPostProcessors:AutowiredAnnotationBeanPostProcessor:处理@Autowired, AnnotationAwareAspectJAutoProxyCreator: proxy切面
    --applicationContext
    7. initMessageSource国际化: messageSource
    8. InitApplicationEventMulticaster: 事件发布器
    9. onRefresh:子类扩展
    10. registerListeners: 监听器
    11. finishBeanFactoryInitialization: singletonObjects(单例池)
    12. finishRefresh生命周期管理器: lifecycleProcessor

2.Spring IOC 底层实现
    DI， factory
    createBeanFactory, getBean(调doGetBean), createBean  , 
                       doGetBean(实际get)  , doCreateBean
    1. using createBeanFactory create bean factory (DefaultListableBeanFactory)
    2. looping create bean: because bean is singleton, so use getBean/doGetBean to search
    3. if no bean, then reflection to create bean: createBean/doCreateBean(无参构造 getDeclaredConstructor(), newinstance)
    4. inject properties:  populateBean()
    5. initializingBean


3.Bean lifeCycle
  1.实例化bean : 反射
  2.填bean属性 : populateBean(), 循环依赖
  3.aware interface : invokeAwareMethod: BeanaName, BeanFactory, BeanClassLoader 属性设置
  4.beanPostProcessor: ApplicationContextPostProcessor(setup ApplicationContext, Enviroment)
  5.调initmethod : InvoikeInitmethod()判断是否实现 initializingBean 接口: if yes call afterPropertiesSet()
  6.调beanPostProcessor : spring aop在这里实现. 常用的AbstractAutoProxyCreator, 
  7.获取obj: getBean()
  8. destroy : 1.是否实现DispoableBean接口 2.调用destroyMethod()
 
4.cycle dependcy
  总： a->b b->a
  1. 创建A，实例A， b==null, 填充b
  2. search B, 找不到 
  3. 创建B，实例B, a==null
  4. search A, 找不到
  A(实例化, 未初始化) 和 B(实例化, 未初始化) : 使用proxy分开实例化和初始化(赋值), 就可以解决
  L1/L2 容器中对象有2种状态: 完整化(放L1), 非完整(实例化, 未初始化)放L2. 所以要用 L1/L2 map来存储
  L3 ObjectFactory(lambda): 先实例 beanm , 才能生成代理 proxy. 实例和代理不能同时出现在容器中, 代理要覆盖实例. bean对象优先放L3,要proxy,返回proxy. 要实例,返回实例 
 
5. 缓存放置/删除
   L3 : createBeanInstance后放 L3 : addSingletonFactory
   L2 : from L3 sure is proxy后 放L2, del L3 : getSingleton 
   L1 : 实例化, 初始化后 发 L1， del L2 & L3 : addSingleton
 
6.Bean Factory vs FactoryBean : 都是create bean
    Bean Factory : 复杂 whole life cycle 
    FactoryBean interface: 简便: isSingleton(单例),  getObjectType(), getObject(自定义创建过程)new, refelaction, proxy 
 
7.Sping patten
    singleton : bean
    Factory : BeanFactory
    tamplet:jdbcTemplate
    Stratege: XmlBeanDefinition
    Observation: Listener, multicaster, event
    decrition: beanWrapper
 
？？ 8.AOP : IOC 的扩展 ：BeanPostProcess
   总： AOP， 应用 
   分： bean的扩展, 在BeanPostProcess
        1. 代理对象 proxy (advice, aspect, pointCut )
        2. JDK & cglib(enhance, callback)
        3. 调用字节码文件中 DynamicAdvisedInterceptor.intercept() 执行
        4. 根据定义好的通知生成拦截器
        5. 从拦截器的通知 1个个执行
     黑马spring5 底层原理 ：https://www.bilibili.com/video/BV1P44y1N7QG/?spm_id_from=333.337.search-card.all.click
     JDK(只能对interface) proxy: import JDK代理类需要实现(implements)父接口. target和proxy 是兄弟关系
        inferface Foo{
            void foo();
        }
        
        ClassLoader classLoader= new ClassLoader();
        Target target = new Target();
        Foo interfaceProxy = (Foo)Proxy.newProxyInstance(classLoader加载, interface(new Class[]{a.class}), new InvocationHandler(proxy, method, args){ 
            Object res = method.invoke(target, ars);//反射
            return res;
         });
         interfaceProxy.foo();
         
     cglib : target和proxy 是父子关系
        Target target = new Target();
        Target TargetProxy = Enhancer.create(target, (MethodInterceptor)(proxy, method, args, methodProxy(不需要用反射来代理))->{
            Object res = method.invoke(target, ars);//反射
            return res;
        });
        TargetProxy.foo();
     
     
    
    
 9. Transaction: rollback
    总: AOP: 生成proxy,按照AOP流程实现. Transactioninterceptor call invoke
    分: 1. pre 解析属性
        2. connect DB, 关闭自动提交,开启 transaction
        3. sql query
        4.1 fail: call completeTransactionAfterThrowing. doRollBack() 先获取连接对象,通过对象rollback
        4.2 pass: call commitTransactionAfterReturning. doCommit() 先获取连接对象,通过对象rollback
        5. cleanupTransactionInfo: clean
        
 10. Transaction broadcast
       Required
       Requires_new
       Support
       Not_support
       Nested
       Never
       Mandatory
      总 : 不同方法嵌套使用, 事务如何处理. 同一个事务还是不同事物. 异常时回滚还是提交. Required, Requires_new, nested 
      分 : 1.分类: 
            内外相同: 外处理
            内外不同: 外不影响内, 内影响外(外调用内) 
            外 Required     内 Required, Requires_new, nested
            外 Requires_new 内 Required, Requires_new, nested
            外 nested       内 Required, Requires_new, nested
 
 11. @bean vs @component  https://www.baeldung.com/spring-component-annotation
        @Component is a class-level annotation, but @Bean is at the method level, so @Component is only an option when a class's source code is editable. 
        @Bean can always be used, but it's more verbose.

        @Component is compatible with Spring's auto-detection, but @Bean requires manual class instantiation.

        Using @Bean, decouples the instantiation of the bean from its class definition. This is why we can use it to make third-party classes into Spring beans. 
        It also means we can introduce logic to decide which of several possible instance options for a bean to use.

 
 
 
 
