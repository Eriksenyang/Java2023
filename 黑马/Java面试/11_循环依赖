p176 proxy
    1. aspect = 1或多个 advisor（advice + pointcut）
    2. advisor = 1 advice + 1 pointcut
    3. 最基本的advice  ：  MethodInterceptor
    4.AnnotationAwareAspectJAutoProxyCreator : 调用 1.creat 2.DI 3.init
    
    ProxyFactory proxyFactory = new ProxyFactory();
    proxyFactory.setTarget(new Target1()); // 调目标
   
   proxyFactory.addAdvice(new MethodInterceptor(){
      @Override
      public Object invoke(MethodInvocation invocation) throws Throwable{
        return invocation.proceed(); //调目标
      }
    });
    
    AspectJExpressionPointcut pointcut = new AspectJExpressingPointcut(); // pointcut
    pointcut.setExpression("execution(包 类 foo())");
    
    proxyFactory.addAdvisor(new DefaultPointcutAdvisor(pointcut, (MethodInvocation)invocation ->{  // advisor = 1 advice + 1 pointcut
      return invocation.proceed(); //调目标
    } ));
    
    
    interface I1{
      void foo();
      void bar();
    }
    
    static class Target1 implement I1{
      public void foo(){
        sop("foo");
      }
      public void bar(){
         sop("bar");
      }
    }
    
   p179 注解方式
      @Aspect  //aspect
      static class Aspsect1{
        @Around("execution(* foo())") //pointcut
        public Object around(ProceedingJoinPoint pjp) throws Throwable{ //advice
          sop
          return pjp.proceed(); //执行 pointcut 原本的程序
        }
      }
    
 循环依赖    
 p184   L1 : singletonObject: 保证singleton
 p186   L3 : singletonFactory: a 到L1/L3找b,没有.生成半成品a放入L3                                返回到a, 去L1找b, 完成a构建,把a放到L1.
                                           call b. b到L1找a,没有.b去L3找a,有半成a.完成b构建, 把b放到L1.
 p187   L2： earlySingletonObjects: 处理proxy代理对象
 p188                    factory: 有循环依赖 返回proxy, 正常返回原始对象
           a到L1/L2/L3 找b,没有. a放L3的factory中                          返回到a,看是否有Pa(没有Pa就新建, 有就直接用). 完成a构建, 把a放到L1.
                    call b. b到L1/L2找a,没有. b去L3找a,有半成a. 判断是否循环依赖,Y就生成代理Pa放到L2.  用Pa完成b构建, 把b放到L1.
    
    
    
    
    
    
    
    
    
    
