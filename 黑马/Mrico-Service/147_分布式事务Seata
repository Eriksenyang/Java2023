147 分布式事务例子 seata
  A: Atomicity 原子
  C: Consistency 一致
  I: Isolation 隔离
  D: Durability 持久
   
 CAP:   Consistency / Availability / Partition tolerance
        如果分区, 可用性和一致性不能同时满足
 
 BASE: basically available
       soft state
       eventually consistent
       
148 Seata TC(Transation Coordinator) server 
    1. 依赖
    2. applicatin.yml : 
       seata: registry: type: nacos:/server-addr: namespce: group: application:
              tx-service-group:
              service: vgroup-mapping:/ seata-demo

149 
   XA基于DB 本身特性: 强一致 完全隔离 性能差，依赖DB
      DTP DistributedTransactinProcessing : TC 与 RM
      1.每个各种执行 2.报告TC： 成功 commit
                               失败 rollback
      2.实现
        1. application.yml： seata/ data-source-proxy-mode ： XA
        2.全局事务如果添加 @GlobalTransactional
          @Override
          @GlobalTransactional
          public Long create(Order order){
            orderMapper.inser(order);
            return order.getId();
          }
   AT(16:00)弱一致 基于全局锁   加锁  RM create 快照 undo.log 性能好
      sql直接提交(不占资源), 建立快照 undo.log。 若成功, 删快照.  若失败, 按快照rollback.
      1.lock_table : 全局lock
        undo.log : 快照
      2. application.yml： seata/ data-source-proxy-mode ： AT
   
   TCC(40：00) :弱一致 基于资源预留 类似AT, 但要通过人工 Rollback, 性能很好
        Try：检测&预留资源
        Confirm: 资源操作
        Cancle: Rollback 释放资源
       例子
       pojo:
         @Data
         @TableName("account_tb1")
         public class Account{
          @TableId
          private Long id;
          private String userId;
          private Integer money;
         }

         @Data
         @TableName("account_freeze_tb1")
         public class AccountFreeze{
          @TableId(type=IdType.INPUT)
          private String xid;
          private String userId;
          private Integer freezeMoney;
          private Integer state;
          
          public static abstract class State{
            public final static int TRY = 0;
            public final static int CONFIRM = 1;
            public final static int CANCEL = 2;
          }
         }
      
      interface
         @LocalTCC
         public interface AccountTCCService{ 
          @TwoPhaseBusinessAction(name="deduct", commitMethod="confirm", rollbackMethod="cancel")
          void deduct(@BusinessActionContextParameter(paraName="userId") String userId,
                      @BusinessActionContextParameter(paraName="money") String money);

          boolean confirm(BusinessActionContext context);

          boolean cancel(BusinessActionContext context);
         }
      Impl
        @Service
        @Slf4j
        public class AccountTCCServiceImpl implements AccountTCCService{
          @Autowired
          private AccountMapper accountMapper;
          @Autowired
          private AccounFreezetMapper freezeMapper;
          
          @Override
          @Transactional
          public void deduct(String userId, int money){
            String xid = RootContext.getXID(); // 全局事务ID 
            AccountFreeze preFreeze = freezeMapper.selectById(xid);
            if(preFreeze != null){ //悬挂
              return;
            }
            
            accountMapper.deduct(userId, money);
            AccountFreeze freeze = new AccountFreeze();
            freeze.setXid(xid);
            freeze.setUserId(userId);
            freeze.setFreezeMoney(money);
            freeze.setState(AccountFreeze.State.TRY);
            freezeMapper.insert(freeze);
          }
          @Override
          public boolean confirm(BusinessActionContext ctx){
            String xid = ctx.getXid();
            int count = freezeMapper.deleteById(xid);  //删除冻结记录
            return count == 1;
          }
          @Override
          public boolean cancel(SBusinessActionContext ctx){
            String xid = ctx.getXid();
            String userId = ctx.getActionContext("userId").toString();
            AccountFreeze freeze = freezeMapper.seleteById(xid)
            if(freeze == null){ //没有try 但是要求rollback属于空回滚
              AccountFreeze freeze = new AccountFreeze();
              freeze.setXid(xid);
              freeze.setUserId(userId);
              freeze.setFreezeMoney(0);
              freeze.setState(AccountFreeze.State.CANCEL);
              freezeMapper.insert(freeze);
              return true;
            }
            if(freeze.getState（） == AccountFreeze.State.CANCEL){ //是否处理过
              return true;
            }
            
            accountMapper.refund(freeze.getUserId(), freeze.getFreezeMoney());
            freeze.setFreezeMoney(0);
            freeze.setState(AccountFreeze.State.CANCEL);
            int count = freezeMapper.updateById(xid);  //rollback冻结记录
            return count == 1;
          }       
        }
       
   Saga(没有隔离性) : ： 1.直接提交 2.失败: 写补偿业务    
    
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
