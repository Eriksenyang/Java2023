1.雪崩问题 
    1.超时处理 :
    2.船舱模式： cabon islation
    3.熔断 ： 根据异常比例
    4.流量控制 : sentinel

2. Sentinel VS hystrix

3.Sentinel
   1.依赖: spring-clould-stater-alibaba-sentinel
   2.application.yml: spring: cloud: sentinel: ransprot: dashboard: localhost:8080
 
 02. limit
      1.直接模式
      2.关联模式
      3. 链路模式
        3.1 如果从同一个contoller来的要分成不同链路： 关闭context整合
            application.yml : spring / clould/ sentinel/ web-context-unify: false 
        3.2 @SentinelResource("xx") //标记要sentinel监控的资源
  
     流量控制效果(到达预值如何处理)
      1.抛异常 :  直接抛 flowException
      2.warmUp : threshold/coldFactor = defult 3 预值惠慢慢变大
      3.queue :  设定 timeout, 超过timeout被拒接
      
      热点参数限流
 
 03 Feign & Sentinel
    1.yml: feign: sentinel: enabled: true
    2.失败后处理 
      2.1 fallbackClass
      2.2 fallbackFactory ： 
        1.逻辑 fallbackFactory class 
        @Slf4j
        public class UserClientFallbackFactory implements FallbackFactory<UserClient>{ 
              @Override
              public UserClient create(Throwable throwable){ 
                return new UserClient(){
                    @Override
                    public User findById(Long id){ //实现 UserClient 接口
                        log.error("error", throwable); // log
                        return new User(); 
                    }
                }
              }
        }
        2.在DefaultFeignConfiguration中把 UserClientFallbackFactory 注册为bean
            public class DefaultFeignConfiguration{
                @Bean
                public UserClientFallbackFactory userClientFallback（）{
                    return new UserClientFallbackFactory();
               }
            }
        3.在 UserClient 接口中配置 UserClientFallbackFactory
            @FeignClient(value="userservice", fallbackFactory = UserClientFallbackFactory.class)
            public interface UserClient{
                @GetMapping("/user/{id}")
                User findById(@PathVariable("id") Long id);
            }
    
      Isolate : Thread / ThreadPool
       
      熔断 :  close, open, half-open
        1. 慢调用比例 ：slow call(overtime) RT: response Time
        2. 异常比例 ：
        3. 异常数
      
      授权规则
        白名单：origin 才能看
        黑名单：origin 禁止
        1.自定义 RequestOriginParser //来源接口
        @Component
        public class HeaderOriginParser implements RequestOriginParser{
            @Override
            public String parserOrigin(HttpServletRequest request){
                String origin = request.getHeader("origin");
                if(StringUtils.isEmpty(origin)){
                    return "blank";
                }
                return origin; //从request 取 origin
            }
        }
       2.yml 加requestHeader
         spring:/ cloud/ gateway/ default-filters: -AddRequestHeader = origin, gateway  //从gateway 来的都加 requestHeader ： origin
       
       
       自定义异常: BlockExceptionHandler interface
        @Componet
        public class SentinelBlockHandler implements BlockExceptionHandler{
            @Override
            public void handle(HttpServletRequest request, HttpServletResponse response) throws Exception{ //重写方法
                String msg = "unkonw exception";
                int status = 429;
                if( e instanceof FlowException){
                    msg = "";
                }else if( e instanceof DegradeException){
                    msg = "";
                }else if( e instanceof ParamFlowException){
                    msg = "";
                }else if( e instanceof AuthorityException){
                    msg = "";
                    status = 401
                }
                response.setContentType("application/json;charset-uft-8");
                response.setStatus(status);
                response.getWriter().println();
            }
        }
       
       持久化
        fresh
        pull : 时间
        push : 放到 Nacos, zookeeper
        
        1. 依赖
        2. nacos setting
        3.
       
       
       
       
       
       
       
       
       
       
       
       
       





