P3: JPA 控制 
    1. ORM: Object Relation Mapping. Hib 是 ORM framwork, 封装了 JDBC. hib 建立了 pojo relate DB table. hib自动生成sql语句 
    2. JPA(interface) : Java Persistence API 
    3. JPA(接口: 可以使用各种ORM) - ORM(hib/other ORM framwork) - JDBC - DB
   
P5   例子： 
     1. 依赖: 
        <mysql>mysql-connector-java
        <hib>  hibernate-entirymanager
       
     2. public class Article implements Serializable {} // entity 
     3. mapping 映射关系
          @Entity //bean
          @Table(name = "Article") //与DB table 对应
          public class Article implements Serializable {
              @Id 
              @GenerateValue(strategy = GenerationType.IDENTITY) //主键生成
              private Integer aid;
              
              @Column(name = "title") //与table对应
              private String title;
                  
          }
       4.配置文件 https://stackoverflow.com/questions/52546758/set-hibernate-dialect-for-jpa-in-yml
         P8  <provide>org.hibernate.jap.HeibernatePersistenceProvider<>  JPA provide   
             <class>com.it.domain.Article<> 实体class
             
             <persistence-unit name="jpa01" transaction-type="RESOURCE_LOCAL">
                <properties>
                <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver">
                <property name="javax.persistence.jdbc.url" value="jdbc:mysql:///springdata">
                <property name="javax.persistence.jdbc.user" value="admin">
                <property name="javax.persistence.jdbc.password" value="admin">
             
            4.1  https://mkyong.com/spring-boot/spring-boot-spring-data-jpa-mysql-example/   
            spring:
                ## MySQL
              datasource:
                driverClassName: org.h2.Driver
                url: jdbc:mysql://localhost:3306/wordpress
                username: username
                password: password            
              jpa:
                hibernate
                    ddl-auto: update
                    use-new-id-generator-mappings: false
        
           4.2  https://spring.io/guides/gs/accessing-data-mysql/
           application.yml          
            spring
                datasource
                    driver-class-name: com.mysql.cj.jdbc.Driver    
                    url: jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example
                    username: springuser
                    password: ThePassword                         
                jpa
                  hibernate
                    ddl-auto: update           
                    #show-sql: true
                  
p7 test
   public class JpaTest{
        @Test
        public void testSave(){
            Article article = new Article();
            article.setTitle("");
            
            String persistenceUnitName = "jpa01"; // setting L25
            EntityManagerFactory factory = Persistence.createEntityManagerFactory(persistenceUnitName); //factory
            EntityManager entityMng = factory.createEntityManager();                                 //entityManage
            EntityTransaction transaction = entityMng.getTransactjion();                             //transaction
            transaction.begin();
            entityMng.persist(article);                 //save()
            transaction.commit();
            entityMng.close();            
        }
   }

p10 SpringData JPA
   1. 依赖: 
        <mysql> mysql-connector-java
        <hib>  hibernate-entirymanager
        <spring> spring-context
                 spring-orm
                 spring-test
                 aspectjweaver
         <jpa>spring-data-jpa        

    2. mapping 映射关系
          @Entity //bean
          @Table(name = "Article") //与DB table 对应
          public class Article implements Serializable {
              @Id 
              @GenerateValue(strategy = GenerationType.IDENTITY) //主键生成
              private Integer aid;
              
              @Column(name = "title") //与table对应
              private String title;                  
          }
    3. Dao :                                  //entity, key                                  entity
        public interface extends JpaRepository<Article, Interge>, JpaSpecificationExecutor<Article>{            
        }
     4.setting
        //dataSource
        <bean id="dataSource" class=""org.springframework.jdbc.datasource.DriverManagerDataSource> 
            <property name="driverClassName" value="com.mysql.jdbc.Driver">
            <property name="url" value="jdbc:mysql:///springdata">
            <property name="username" value="admin">
            <property name="password" value="admin">
        </>
        //entityManagerFactory
        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
             <property name="dataSource" ref="dataSource">
             <property name="persistenceProvider">
                <bean class="org.hibernate.jpa.HibernatePersistenceProvide"></>
             </>
             <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jap.vendor.HibernateJpaVendorAdapter">
                    <property name="database" value="MYSQL">
                 </>
              </>   
             <property name="packagesToScan" value="com.it.domain"> // scan domain包
        </>     
        //TransactionManager
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
            <property name="dataSource" ref=dataSource>
        <>   
        //jpa
        <jpa: repositories base-package="com.it.dao" //dao 包
                            entity-manager-factory-ref="entityManagerFactory"
                            transaction-manager-ref="transactionManager"
                            >

    5.test p13
        @RunWith(springJunit4ClassRunner.class)
        @ContextConfiguration("classpath:applicationContext-jpa.xml")
        public class SpringDataJpaTest{
            @Autowired
            private ArticleDao articleDao;
            
            @Test
            public void testSave(){
                Article article= new Article();
                article.setTitle("test");
                articleDao.save(article);
            }
        }


















                    
                    
