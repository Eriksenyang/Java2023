p21 注解开发
  1. 注解 @Component("name")/ @Controller @Service @Repository
  2. 配置文件扫描bean ： application.xml  <comtext:component-scan base-package="bean的包">
 
p22 用config class 替代 pom.xml    
    1.@Configuration
      @ComponentScan("包")//扫包
      public class SpringConfig{     }
    2.main 使用
      AnnotationConfigApplicationContext(springConfig.class);

p23 lifeCycle
    @Scope("prototype") //作用范围
    public class AImpl implment A{
      @PostConstruct //init
      
      @PreDestroy //destroy
    }
  
p24 
  1.引用类型注入
      @Autowired
      @Qualifier()//指定bean   
  2. 简单类型注入
      @Value(“值”)
      private String name;  
  3. 加载proprety的值
      1.jdbc.properties
         key=""
      2.在Config class中配置 property source
        @Configuration
        @ComponentScan(“包”)
        @PropertySource("jdbc.properties")
        public class SpringConfig{ }
       3.使用
          @Value(${"key"})
          private String name;
      
 p25 调用第3方bean
     1.导依赖
     2.定义1个方法管理对象
     3.声明这个方法为 @Bean
        publc class JdbcConfig{
           @Bean
           public DataSource dataSource(){
            DruidDataSource ds = new DruidDataSource();
            ds.setDriveClassName();
            ...
            return ds;
           }
      4.一个config统一管理
          @Config
          @Import(JdbcConfig.class)
          public class SpringCOnfig{ }

  p26 
      1.简单类型
        @Value("key")
        private String driver;
      2.引用类型 : 形参BookDao BookDao, 只要你注册了BookDao, spring 会自动装配
         public DataSource datasource(BookDao BookDao){}
         
   p27 xml vs @
            定义                             DI                   第3方            范围                周期
      xml   id= class=                      setter/construct      FactoryBean      <scope="">         init-method/destroy-method
      @     @Component                      @Autowired            @Bean             @Scope            @PostConstuctor
            @ComponentScan//扫描bean                                                                  @PreDestroy
        
       
p28 spring & MyBatis    
   SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();
   InputStream inputStream = Resource.getResourceAsStream("sqlMapConfig.xml");
   SqlSessinFactory  sqlSessinFactory = sqlSessionFactoryBuilder.build(inputStream);

p29
    1.依赖 ： spring-jdbc
               mybatis-spring

    2.config
      @Configuration
      @ComponentScan("com.itheima")//scan bean 所在的包
      @PropertySource("jdbc.properties"); //scan properties
      @Import({JdbcConfig.class, MybatisConfig.class} ) // 导入 jdbc config
      public class SpringConfig{

      }
    3.第3方 jdbc 数据源
      public class JdbcConfig{
        @Value(${jdbc.driver})//来自jdbc.properties
        private String driver;
        ...
        @Bean
        public DataSource dataSource(){
          DruidDataSource ds = new DruidDataSource();
          ds.setDriverClassName(driver);
          ...
          return ds;
        }     
      }
    4.Mybatis 
      public class MybatisConfig{
         @Bean
         public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource){
          SqlSessionFactoryBean ssfb = new SqlSessionFactoryBean();
          ssfb.setTypeAliasesPackage("com.itheima.domain");     //scan domain(pojo)
          ssfb.setDataSource(dataSource);
          return ssfb;
         }
         @Bean
         public MapperScannerConfigurer mapperScannerConfigurer(){
          MapperScannerConfigurer msc = new MapperScannerConfigurer();
          msc.setBasePackage("com.itheima.dao");                //scan dao
          return msc;
         }
  
  p30 JUnit
      1.依赖  junit
              spring-test
      2.@Runwith(SpringJunit4ClassRunner.class)
        @ContextConfiguration(classes=springConfig.class)
        public class ATest{
          @Autowired
          private AcccountService acccountService;
          @Test
          public void testFindById(){
            acccountService.findById(1);
          }
        }
  
  
  
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
