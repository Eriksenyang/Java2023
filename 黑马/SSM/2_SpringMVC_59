p59 前后整合
    1.pom依赖
    2.config 
      @Configuration
      @ComponentScan("xxx.service")
      @PropertySource("xxx.properties")
      @Import("其他config")

p60 model

p61 1.service  test
        @Runwith(SpirngJunit4ClassRunner.class)
        @ContextConfiguration(classes = springConfig.class)
        public class BookServiceTest{}
    
    2.controller postman test
    
    3.transaction
      1.在config开启
         @Configuration
         ...
         @EnableTransactionManagement
         public class SpringConfig{}
       2.在jdbc.config中 (写在其他config中也可以， 最好跟datasource在一起,因为要用DS )
            @Bean
            public PlateformTransactionManager transactionManager(DataSource dataSource){
                DataSourceTransactionManagement ds = new DataSourceTransactionManagement();
                ds.setDataSource(dataSource);
                return ds;
            }
        3.在service interface 中使用
            @Transactional
            public interface BookService{}
    
p62/p63 前后端json 数据封装
     public class Result{
        private Object data;
        private Integer code;
        private String msg;
     }
    2.常量 
       public class Code{
        public static final Integer SAVE_SUCCESS = 200;
       }
    3. 在controller中使用
        @PostMapping
        public Result save(@RequestBody Book book){
            boolean flag = bookService.save(book);
            return new Result(flag? Code.SAVE_SUC : Code.SAVE_ERR, flag);
        }

p64 处理异常 exception : AOP 
    1.在 controller包 
      @RestControllerAdvice
      public class ProjectExceptionAdvice{
        @ExceptionHandler(Exception.class)
        public Result doException(Exception ex){
             
        }
      }
      2.在总config的 @ComponentScan中加入扫描这个 class
      
    





















