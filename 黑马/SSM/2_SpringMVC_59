p59 前后整合
    1.pom依赖
    2.config 
      @Configuration
      @ComponentScan("xxx.service")
      @PropertySource("xxx.properties")
      @Import("其他config")

p60 model

p61 1.service  test
        @Runwith(SpirngJunit4ClassRunner.class)
        @ContextConfiguration(classes = springConfig.class)
        public class BookServiceTest{}
    
    2.controller postman test
    
    3.transaction
      1.在config开启
         @Configuration
         ...
         @EnableTransactionManagement
         public class SpringConfig{}
       2.在jdbc.config中 (写在其他config中也可以， 最好跟datasource在一起,因为要用DS )
            @Bean
            public PlateformTransactionManager transactionManager(DataSource dataSource){
                DataSourceTransactionManagement ds = new DataSourceTransactionManagement();
                ds.setDataSource(dataSource);
                return ds;
            }
        3.在service interface 中使用
            @Transactional
            public interface BookService{}
    
p62/p63 前后端json 数据封装
     public class Result{
        private Object data;
        private Integer code;
        private String msg;
     }
    2.常量 
       public class Code{
        public static final Integer SAVE_SUCCESS = 200;
       }
    3. 在controller中使用
        @PostMapping
        public Result save(@RequestBody Book book){
            boolean flag = bookService.save(book);
            return new Result(flag? Code.SAVE_SUC : Code.SAVE_ERR, flag);
        }

p64 处理异常 exception : AOP 
    1.处理器在 controller包 
      @RestControllerAdvice
      public class ProjectExceptionAdvice{
        @ExceptionHandler(Exception.class)
        public Result doException(Exception ex){
             
        }
      }
      2.在总config的 @ComponentScan中加入扫描这个 class
      
p65 新建Exception包
    1. SystemException
         public class SystemException extends RuntimeException{
            private Integer code;
         }
    2. BusinessException
        public class BusinessException extends RuntimeException{
            private Integer code;
         }

    3.在可能发生异常的地方 使用
        try{
            }catch(Exception e){
                throw new SystemException(401, "msg", e);
            }      
     4.交给exception处理器 p64
           @RestControllerAdvice
           public class ProjectExceptionAdvice{
                @ExceptionHandler(SystemException.class)
                public Result doSystemException(SysetemException ex){
                    return new Result(ex.getCode(), null, ex.getMessage()); //返回标准result
                }
      }

p66 连前端
    1.让springMvc 放行 页面request
      @Configuration
      public class springMvcHelper extends webMvcConfigurationSupport{
        Override
        protected void addResourceHandler(ResouceHandlerRegistry registry){
            registry.addResourceHandler("让 springMVC skip webapp 包下的前端页面");
        }
      }

p67      异步调用 axios.get("/book") 
p68 
p69
p70


p71 Interceptor(是springMVC技术） vs Filter(是servlet技术,可对所有request进行增强)
    
p72 1.建立 Interceptor bean 在 controller包
        @Component
        public class PInterceptor implements HandlerInterceptor{
           preHandle
           
           postHandle
           
           afterCompletion
        }        
     2.配置到config文件中, 让这个包被主 Config扫描
       @Configuration
       @ComponentScen("Interceptor包")
       
     3.在一个配置类中 使用interceptor, 它 extends WebMvcConfigurationSupport
       @Configuration
       public class SpringMvcSupport extends WebMvcConfigurationSupport{
        @Autowired
        private PInterceptor pInterceptor;
        
        @Override
        protacteed void addInterceptor(InterceptorRegistry registry){
            registry.addInterceptor(pInterceptor).addPathPatterns("/books"); // 在路径 "/books" 时使用 pInterceptor
        }
       }
     4.在主config中扫描 这一个配置类
      


































