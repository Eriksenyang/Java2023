P5 IoC
  IoC: Inversion of Control: spring contain 控制对象(bean)创建
  DI: Dependency Injection: 建立 bean的依赖关系

P6 sping
   1.依赖 : spring-context
   2.接口& 实现 ：public interface BookService{} & public class BookServiceImpl implement BookService{}
   2.配置文件applicationContext.xml  <bean id="" class="" />
   3.main: ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
   
 P7 DI
     1.配置文件applicationContext.xml <property name="" ref="">
     2.主方法加入 set方法, 调用依赖的 bean
     
 p8 bean配置
    bean别名name ：配置文件applicationContext.xml  <bean id="" name="别名" class="" />
    bean scope： singleton(哪些适合用service,dao, util), prototype(每次new新的) 
    
 p9 bean 实例化
    1.反射construct建
    
 p10 静态工厂
    1.public class OrderDaoFactory{ public static OrderDao getOrderDao(){return new OrderDaoImpl(); }}
    2.配置文件applicationContext.xml <bean id="" class="..orderDaoFactory" factory-method=""//工厂类的方法>
 
 p11 实例化工厂(配置文件applicationContext.xml )
     1.<bean id="" class="">
     2.<bean id="" factory-bean="" factory-method="">
    
 p12 lifeCycle: 初始化(创建对象/构造方法/set方法/bean初始化), 使用bean, 销毁
    10:00 推荐使用
    public class BImpl implements B, InitializingBean, DisposebleBean
     public void afterPropertiesSet() throws Exception{}
     public void destroy throws Exception()
    
    1.public class
        public void init(){}
        public void destory(){}
    2.配置文件applicationContext: <bean id="" class="" init-method="" destroy-method="">
    3.要用destroy方法,要关闭容器  ClassPathXmlApplicationContext.registerShutdownHook() / ClassPathXmlApplicationContext.close()
    
p13  DI ： 强制依赖用construct DI/ 随意的用setting DI
    1. setter DI 引用类型
        1.1 class: public class BImpl implements BService{ public void setDao(){}}
        1.2 xml: <bean id="" class="">
                    <property name="" ref="被引用">
                 <bean id="被引用" class="">  //被引用的bean 
    
    2. setter DI 一般类型
        2.1 class: public class BImpl implements BService{ public void setNumber(){}}
        2.2 xml: <bean id="" class="">
                    <property name="" value="5">
    
    3.construct DI 引用类型
         3.1  class: public class BImpl implements BService{ public BImpl(Obj obj){this.obj = obj}}     
         3.2 xml: <bean id="" class="">
                        <constructor-arg name="obj" ref="被引用">
                  <bean id="被引用" class="">  //被引用的bean     
    
    4.construct DI 一般类型
         4.1  class: public class BImpl implements BService{ public BImpl(int number){this.number = number}}     
         4.2 xml: <bean id="" class="">
                        <constructor-arg name="number" value="10">
p15: autowire
   按类型
      1.class set方法: public class BImpl implements BService{ public void setNumber(){}}
      2.xml autowire: <bean id="" class="" autowird="byType">   //按类型
                      <bean id="被引用" class="">  //被引用的bean 
    按名称
        xml autowire: <bean id="" class="" autowird="byName">   //按名称
    
p16 <property name="array">
      <array>        <map>                              <props>
        <value>         <entry key="" value="">            <prop key="">xxx</prop>

20230428
P17 管理外部bean
      1.导依赖到 pom.xml
      2.配xml: <bean id="" class=""> 
                  <property name="" calue="">

p18 spring 加载properies
      1.xml 开启contxt : xmlns:context
      2.使用context加载properties文件 <context:proprety-placeholder location="xxx.properties" /> //locatijon 在resource包下
      3.用${}读取属性值 <bean class="">
                            <property name="url" value=${properties文件中name: eg${jabc.url}}>p19
    
 p19 container
       1. ClassPathXmlApplicationContext() //立即加载bean. BeanFactory(顶层接口) 延迟加载bean
       2. FileSystemXmlApplicationContext() //文件路径
    获取bean
      1.按名称： (BookDao)ctx.getBean("name");
      2.按类型  ctx.getBean(类型.class);
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
