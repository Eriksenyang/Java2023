1. Select sort  O(N2) 6:00 : 从0 到 n-1, 找min, 放到0. (1~n-1, min, 放到1)
  public static void selectionSort(int[ arr){
    if(arr== null || arr.length < 2) return;
    
    for(int i = 0; i < arr.length - 1; i++){// 从0 到 n-1
      int minIndex = i;
      for(int j = i + 1; j < arr.length; j++){//找min
        minIndex = arr[j] < arr[minIndex] ? j : minIndex;
      }
      swap(arr, i, minIndex);
    }
  }  
    
2. Bubbl eSort 27:00 : 2个比较，大的右移
  public static void bubbleSort(int[] arr){
    if(arr == null || arr.length < 2) return;
    for(int i = arr.length - 1; i > 0, i--){ // n-1到0
      for(int j = 0; j < i; j++){ //2个数比较
        if(arr[j] > arr[j + 1]){
          swap(arr, j, j + 1);
        }
      }
    }
  }
  public static void swap(int[] arr, int i, int j){ // a=a b=b
    arr[i] = arr[i] ^ arr[j]; // a = a^b, b不变 b= b
    arr[j] = arr[i] ^ arr[j]; // a不变a = a^b,  b= a^b (带入a=a^b)=> a^b^b => a 
    arr[i] = arr[i] ^ arr[j]; // a = a^b(带入b=a^b)=>a^a^b =>b   , b不变 b=a 
  }
 
3 ^无进位相加 30:00 
  1：07 最右的1 : a &(~a + 1) 
 
4. Insert Sort 1:15 : 0~0有序, 0~1有序,
  public static void insertionSort(int[] arr){
    if(arr == null || arr.length < 2) return;
    
    for(int i = 1; i < arr.length; i++){ // 1~i有序
      for(int j = i -1; j >= 0 && arr[j] > arr[j+1}; j-- ){ // 若j>j+1,交换. j左移
        swap(arr, j, j+1);
      }
    }
  }
 
 5.二分












